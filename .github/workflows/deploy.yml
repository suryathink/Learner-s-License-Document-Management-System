name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/learners-license-api:latest ./server

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/learners-license-api:latest

      - name: Build Success Notification
        run: |
          echo "✅ Docker image built and pushed successfully!"
          echo "🐳 Image: ${{ secrets.DOCKER_USERNAME }}/learners-license-api:latest"

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Decode and Save SSH Key
        env:
          EC2_KEY_BASE64: ${{ secrets.EC2_KEY_BASE64 }}
        run: |
          echo "$EC2_KEY_BASE64" | base64 --decode > learners-license-key.pem
          chmod 400 learners-license-key.pem

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i learners-license-key.pem ${EC2_USER}@${EC2_HOST} '
            echo "🔄 Starting deployment process..."
            
            echo "🔐 Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            echo "📥 Pulling the latest API image..."
            docker pull "${{ secrets.DOCKER_USERNAME }}/learners-license-api:latest"

            echo "🛑 Stopping old container..."
            docker stop learners-license-api 2>/dev/null || true
            docker rm learners-license-api 2>/dev/null || true

            echo "🧹 Cleaning up old Docker images..."
            docker system prune -af

            echo "🚀 Starting the new container..."
            docker run \
              --env-file /home/ubuntu/.env \
              -d \
              --name learners-license-api \
              --restart unless-stopped \
              -p 5000:5000 \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              "${{ secrets.DOCKER_USERNAME }}/learners-license-api:latest"

            echo "⏳ Waiting for container to start..."
            sleep 20

            echo "📊 Container status:"
            docker ps -f name=learners-license-api

            echo "🏥 Performing health check..."
            if curl -f http://localhost:5000/health; then
              echo "✅ Deployment successful! API is healthy."
            else
              echo "❌ Health check failed. Checking logs..."
              docker logs --tail=20 learners-license-api
              exit 1
            fi
          '

      - name: Deployment Notification
        if: success()
        run: |
          echo "🎉 Deployment to EC2 completed successfully!"
          echo "🌐 API URL: http://${{ secrets.EC2_HOST }}:5000"
          echo "🔍 Health Check: http://${{ secrets.EC2_HOST }}:5000/health"

      - name: Deployment Failed Notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs above for more details."
